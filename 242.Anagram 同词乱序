class Solution(object):
    def isAnagram(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        return sorted(s) == sorted(t)
        
        
        #another way
        #return (len(s)==len(t) and not any([c for c in s if s.lower().count(c)!=t.lower().count(c)]))
        #a list of characters if the character is in s but not in t
        #any
        #any 若argument全部为空才return False
        #why (not any !=). why don't just (any ==), if so, even not the same, any return True cuz you got at least some c
        #why check length? 'rotor','torrokkkkkk", only ietrate trhough S1.
# sorted() takes any iterable and returns a list. 对比 L.sort()
#iterable:An object capable of returning its members one at a time(can be used in a for loop). Examples of iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict.
#e.g. >>> sorted({1:3,4:2,3:2}) #sorted(dictionary) returns key in order
#     [1, 3, 4]
